* good issues:
** https://www.huffpost.com/entry/andrew-ng_n_7267682
   But innovation or creativity is a strategic skill where every day you wake up 
   and it’s a totally unique context that no one’s ever been in, and you need to
    make good decisions in your completely unique environment. So as far as I can 
   tell, the only was we know way to teach strategic skills is by example, by seeing 
   tons of examples. The human brain, when you see enough examples, learns to internalize 
   those rules and guidelines for making good strategic decisions.
   
   But what is your best "flight simulator"? the answer is to embrace tons of examples!!!

   <<zero to one>>
   <<cross the chasm>>
   <<the learn startup>>
   <<talking to humans>>
   <<rocket surgery made easy>>
   <<the hard thing about hard thing>>
   <<so good they could not ignore you>>

   When I talk to researchers, when I talk to people wanting to engage in entrepreneurship, 
   I tell them that if you read research papers consistently, if you seriously study half a
    dozen papers a week and you do that for two years, after those two years you will have 
   learned a lot. This is a fantastic investment in your own long term development. 

   Chances are what you learned studying all Saturday won’t make you that much better at your 
   job the following Monday. There are very few, almost no short-term rewards for these things. 
   But it’s a fantastic long-term investment.
   [念念不忘，终有回响。那些不会给你instant gratification的好东西，终会发光]

   The challenge that faces us is to find a way to scalably teach people to do non-routine non-repetitive work. 
   Our education system, historically, has not been good at doing that at scale. The top universities are good 
   at doing that for a relatively modest fraction of the population. But a lot of our population ends up doing 
   work that is important but also routine and repetitive. That’s a challenge that faces our educational system.
   [为工业化时代服务的教育体系，似乎还不适合即将到来的创新时代]
* yifhao:
  [[./graph/jingyan.jpeg]]
  线上性能问题的定位和优化是程序员进阶的必经之路

在做内存问题相关的 profiling 时：
  1. 若 gc 相关函数占用异常，可重点排查对象数量
  2. 解决速度问题（CPU占用）时，关注对象数量（ --inuse/alloc_objects ）指标
  3. 解决内存占用问题时，关注分配空间（ --inuse/alloc_space ）指标

  inuse 代表当前时刻的内存情况，alloc 代表从从程序启动到当前时刻累计的内存情况，一般情况下看 inuse 指标更重要一些，但某些时候两张图对比着看也能有些意外发现。
在日常 golang 编码时：
  1. 参数类型要检查，尤其是 sql 参数要检查（低级错误）
  2. 传递struct尽量使用指针，减少复制和内存占用消耗（尤其对于赋值给interface，会分配到堆上，额外增加gc消耗）
  3. 尽量不使用循环引用，除非逻辑真的需要
  4. 能在初始化中做的事就不要放到每次调用的时候做
* Go语言 CPU 性能、内存分析调试方法大汇总 
  https://mp.weixin.qq.com/s/-HojlxCZZIcWWwprQaVkzw
* rust open source project:
** A cross-platform GUI library for Rust, inspired by Elm 
   https://github.com/hecrj/iced
** Lightning Fast, Ultra Relevant, and Typo-Tolerant Search Engine
   https://github.com/meilisearch/MeiliSearch
** A cat(1) clone with wings. 
   https://github.com/sharkdp/bat
* NATS
** The LOG 
https://engineering.linkedin.com/distributed-systems/log-what-every-software-engineer-should-know-about-real-time-datas-unifying
One of the most useful things I learned in all this was that many of the 
things we were building had a very simple concept at their heart: *the log*.
*** what is log 
[[file:./graph/log1.png]]

   the log entry number in each record can be seen as a timestamp, and this is the key point;
this "timestamp" can decouple from any physical clock; a log is really just a kind of table
or file where the records are sorted by time, they record what happend and when; which is 
the heart problem of distribute system;
**** logs in databases: 
log is mainly use as a method for replicating data bettween databases;
the use of logs as a mechanusim for data subscription seem to have arisen by chance, but 
this very abstraction is ideal for supporting all kinds of messaging, data flow, and real-time
data processing;
**** logs in distribute system:
State Machine Replication Principle:
If two identical, deterministic processes begin in the same state and get the same inputs in the 
same order, they will produce the same output and end in the same state. 

active-active model: 
keep a log of the incoming requests and each replica processes each request
[[file:./graph/log3.png]]

primary-backup model:
[[file:./graph/log2.png]]
The distributed log can be seen as the data structure which models the problem of consensus.


and how to use logs for data integration, real time processing, and system building. 
**** changelog 101:
 The log is similar to the list of all credits and debits and bank processes; 
a table is all the current account balances. [in DB system]

tables support data at rest and logs capture change. this is a bit like source code control system(
the sequece of pathes is just a log, the "checked out" branch is analogous to the table)
*** data integration
Data integration is making all the data an orgnization has available in all its services and systems;
first make the data available!!!
so the question is: how can we build reliable data flow throughout all the data in an orgnization?

event data firehose and explosions of specialized data systems --> the combination of more data of more
varieties and a desire to get this data into more systems leads to a huge data integration problem.

[[file:./graph/log4.png]]

the log also acts as a buffer, which makes data production asynchronous from data consumption.
it can allow multiple subscribers that may consume at different rates.

amazon Kinesis;

build a scalable log:

*** log and streaming processing
** Out of the tar pit
   declarative programming
   
